
// Generated from ZHLLexer.g4 by ANTLR 4.12.0


#include "ZHLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ZHLLexerStaticData final {
  ZHLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ZHLLexerStaticData(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData(ZHLLexerStaticData&&) = delete;
  ZHLLexerStaticData& operator=(const ZHLLexerStaticData&) = delete;
  ZHLLexerStaticData& operator=(ZHLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag zhllexerLexerOnceFlag;
ZHLLexerStaticData *zhllexerLexerStaticData = nullptr;

void zhllexerLexerInitialize() {
  assert(zhllexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ZHLLexerStaticData>(
    std::vector<std::string>{
      "DoubleQuote", "Colon", "Semi", "Qualifier", "Cleanup", "Static", 
      "Virtual", "Declspec", "External", "LeftParen", "RightParen", "Comma", 
      "Star", "Lt", "Gt", "LeftRBracket", "RightRBracket", "LeftBracket", 
      "RightBracket", "Class", "Struct", "Reference", "Depends", "Typedef", 
      "Const", "CppRef", "Unsigned", "Signed", "Long", "Int", "Short", "Char", 
      "Bool", "Float", "Double", "Void", "Type", "Size", "Synonym", "Align", 
      "Vtable", "Skip", "Pure", "Override", "Debug", "NoHook", "Asm", "Visibility", 
      "Public", "Private", "Protected", "Register", "GeneralPurposeRegister", 
      "Eax", "Ebx", "Ecx", "Edx", "Esi", "Edi", "Esp", "Ebp", "SSERegister", 
      "Xmm0", "Xmm1", "Xmm2", "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "CallingConvention", 
      "Stdcall", "Cdecl", "Fastcall", "Thiscall", "X8664", "X8664_Output", 
      "ColonLessSignature", "Signature", "ReferenceSignature", "Operator", 
      "OpSymbol", "Name", "Number", "HexNumber", "DecNumber", "GenericCode", 
      "Whitespace", "Newline", "BlockComment", "LineComment", "Any"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\"'", "':'", "';'", "", "'cleanup'", "'static'", "'virtual'", 
      "'__declspec'", "'external'", "'('", "')'", "','", "'*'", "'<'", "'>'", 
      "'['", "']'", "'{'", "'}'", "'class'", "'struct'", "'reference'", 
      "'depends'", "'typedef'", "'const'", "'&'", "'unsigned'", "'signed'", 
      "'long'", "'int'", "'short'", "'char'", "'bool'", "'float'", "'double'", 
      "'void'", "'TypeInfo'", "'Size'", "'Synonym'", "'Align'", "'__vtable'", 
      "'skip'", "'pure'", "'override'", "'debug'", "'nohook'", "'asm'", 
      "", "'public'", "'private'", "'protected'", "", "", "'eax'", "'ebx'", 
      "'ecx'", "'edx'", "'esi'", "'edi'", "'esp'", "'ebp'", "", "'xmm0'", 
      "'xmm1'", "'xmm2'", "'xmm3'", "'xmm4'", "'xmm5'", "'xmm6'", "'xmm7'", 
      "", "'__stdcall'", "'__cdecl'", "'__fastcall'", "'__thiscall'", "'__x86_64'", 
      "'__x86_64_output'", "", "", "", "'operator'"
    },
    std::vector<std::string>{
      "", "DoubleQuote", "Colon", "Semi", "Qualifier", "Cleanup", "Static", 
      "Virtual", "Declspec", "External", "LeftParen", "RightParen", "Comma", 
      "Star", "Lt", "Gt", "LeftRBracket", "RightRBracket", "LeftBracket", 
      "RightBracket", "Class", "Struct", "Reference", "Depends", "Typedef", 
      "Const", "CppRef", "Unsigned", "Signed", "Long", "Int", "Short", "Char", 
      "Bool", "Float", "Double", "Void", "Type", "Size", "Synonym", "Align", 
      "Vtable", "Skip", "Pure", "Override", "Debug", "NoHook", "Asm", "Visibility", 
      "Public", "Private", "Protected", "Register", "GeneralPurposeRegister", 
      "Eax", "Ebx", "Ecx", "Edx", "Esi", "Edi", "Esp", "Ebp", "SSERegister", 
      "Xmm0", "Xmm1", "Xmm2", "Xmm3", "Xmm4", "Xmm5", "Xmm6", "Xmm7", "CallingConvention", 
      "Stdcall", "Cdecl", "Fastcall", "Thiscall", "X8664", "X8664_Output", 
      "ColonLessSignature", "Signature", "ReferenceSignature", "Operator", 
      "OpSymbol", "Name", "Number", "HexNumber", "DecNumber", "GenericCode", 
      "Whitespace", "Newline", "BlockComment", "LineComment", "Any"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,92,763,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,198,8,3,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
  	1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
  	1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
  	1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
  	1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
  	1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,3,47,445,8,47,
  	1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,3,51,
  	474,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,484,8,52,1,53,1,
  	53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,
  	56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,
  	60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,526,8,61,1,
  	62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
  	64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,
  	67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,
  	70,1,70,1,70,1,70,3,70,574,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
  	71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,
  	73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,
  	74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
  	76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
  	76,1,76,1,77,1,77,3,77,643,8,77,1,77,4,77,646,8,77,11,77,12,77,647,1,
  	77,1,77,1,78,1,78,1,78,1,79,1,79,3,79,657,8,79,1,79,4,79,660,8,79,11,
  	79,12,79,661,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
  	80,1,81,1,81,3,81,678,8,81,1,81,1,81,1,81,3,81,683,8,81,1,82,1,82,5,82,
  	687,8,82,10,82,12,82,690,9,82,1,83,1,83,3,83,694,8,83,1,84,1,84,1,84,
  	1,84,4,84,700,8,84,11,84,12,84,701,1,85,4,85,705,8,85,11,85,12,85,706,
  	1,86,1,86,1,86,1,86,5,86,713,8,86,10,86,12,86,716,9,86,1,86,1,86,1,86,
  	1,87,4,87,722,8,87,11,87,12,87,723,1,87,1,87,1,88,1,88,3,88,730,8,88,
  	1,88,3,88,733,8,88,1,88,1,88,1,89,1,89,1,89,1,89,5,89,741,8,89,10,89,
  	12,89,744,9,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,5,90,755,
  	8,90,10,90,12,90,758,9,90,1,90,1,90,1,91,1,91,2,714,742,0,92,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
  	101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
  	121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,
  	141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,
  	161,81,163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,
  	181,91,183,92,1,0,9,4,0,48,57,63,63,65,70,97,102,5,0,40,41,48,57,63,63,
  	65,70,97,102,3,0,42,43,45,45,47,47,3,0,65,90,95,95,97,122,4,0,48,57,65,
  	90,95,95,97,122,3,0,48,57,65,70,97,102,1,0,48,57,2,0,9,9,32,32,2,0,10,
  	10,13,13,806,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
  	0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
  	0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
  	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
  	0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
  	0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
  	1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
  	0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
  	0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
  	1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
  	0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
  	0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
  	0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
  	0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
  	0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,
  	0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,
  	0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,
  	0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,1,185,1,
  	0,0,0,3,187,1,0,0,0,5,189,1,0,0,0,7,197,1,0,0,0,9,199,1,0,0,0,11,207,
  	1,0,0,0,13,214,1,0,0,0,15,222,1,0,0,0,17,233,1,0,0,0,19,242,1,0,0,0,21,
  	244,1,0,0,0,23,246,1,0,0,0,25,248,1,0,0,0,27,250,1,0,0,0,29,252,1,0,0,
  	0,31,254,1,0,0,0,33,256,1,0,0,0,35,258,1,0,0,0,37,260,1,0,0,0,39,262,
  	1,0,0,0,41,268,1,0,0,0,43,275,1,0,0,0,45,285,1,0,0,0,47,293,1,0,0,0,49,
  	301,1,0,0,0,51,307,1,0,0,0,53,309,1,0,0,0,55,318,1,0,0,0,57,325,1,0,0,
  	0,59,330,1,0,0,0,61,334,1,0,0,0,63,340,1,0,0,0,65,345,1,0,0,0,67,350,
  	1,0,0,0,69,356,1,0,0,0,71,363,1,0,0,0,73,368,1,0,0,0,75,377,1,0,0,0,77,
  	382,1,0,0,0,79,390,1,0,0,0,81,396,1,0,0,0,83,405,1,0,0,0,85,410,1,0,0,
  	0,87,415,1,0,0,0,89,424,1,0,0,0,91,430,1,0,0,0,93,437,1,0,0,0,95,444,
  	1,0,0,0,97,446,1,0,0,0,99,453,1,0,0,0,101,461,1,0,0,0,103,473,1,0,0,0,
  	105,483,1,0,0,0,107,485,1,0,0,0,109,489,1,0,0,0,111,493,1,0,0,0,113,497,
  	1,0,0,0,115,501,1,0,0,0,117,505,1,0,0,0,119,509,1,0,0,0,121,513,1,0,0,
  	0,123,525,1,0,0,0,125,527,1,0,0,0,127,532,1,0,0,0,129,537,1,0,0,0,131,
  	542,1,0,0,0,133,547,1,0,0,0,135,552,1,0,0,0,137,557,1,0,0,0,139,562,1,
  	0,0,0,141,573,1,0,0,0,143,575,1,0,0,0,145,585,1,0,0,0,147,593,1,0,0,0,
  	149,604,1,0,0,0,151,615,1,0,0,0,153,624,1,0,0,0,155,640,1,0,0,0,157,651,
  	1,0,0,0,159,654,1,0,0,0,161,666,1,0,0,0,163,682,1,0,0,0,165,684,1,0,0,
  	0,167,693,1,0,0,0,169,695,1,0,0,0,171,704,1,0,0,0,173,708,1,0,0,0,175,
  	721,1,0,0,0,177,732,1,0,0,0,179,736,1,0,0,0,181,750,1,0,0,0,183,761,1,
  	0,0,0,185,186,5,34,0,0,186,2,1,0,0,0,187,188,5,58,0,0,188,4,1,0,0,0,189,
  	190,5,59,0,0,190,6,1,0,0,0,191,198,3,9,4,0,192,198,3,11,5,0,193,198,3,
  	13,6,0,194,198,3,15,7,0,195,198,3,89,44,0,196,198,3,91,45,0,197,191,1,
  	0,0,0,197,192,1,0,0,0,197,193,1,0,0,0,197,194,1,0,0,0,197,195,1,0,0,0,
  	197,196,1,0,0,0,198,8,1,0,0,0,199,200,5,99,0,0,200,201,5,108,0,0,201,
  	202,5,101,0,0,202,203,5,97,0,0,203,204,5,110,0,0,204,205,5,117,0,0,205,
  	206,5,112,0,0,206,10,1,0,0,0,207,208,5,115,0,0,208,209,5,116,0,0,209,
  	210,5,97,0,0,210,211,5,116,0,0,211,212,5,105,0,0,212,213,5,99,0,0,213,
  	12,1,0,0,0,214,215,5,118,0,0,215,216,5,105,0,0,216,217,5,114,0,0,217,
  	218,5,116,0,0,218,219,5,117,0,0,219,220,5,97,0,0,220,221,5,108,0,0,221,
  	14,1,0,0,0,222,223,5,95,0,0,223,224,5,95,0,0,224,225,5,100,0,0,225,226,
  	5,101,0,0,226,227,5,99,0,0,227,228,5,108,0,0,228,229,5,115,0,0,229,230,
  	5,112,0,0,230,231,5,101,0,0,231,232,5,99,0,0,232,16,1,0,0,0,233,234,5,
  	101,0,0,234,235,5,120,0,0,235,236,5,116,0,0,236,237,5,101,0,0,237,238,
  	5,114,0,0,238,239,5,110,0,0,239,240,5,97,0,0,240,241,5,108,0,0,241,18,
  	1,0,0,0,242,243,5,40,0,0,243,20,1,0,0,0,244,245,5,41,0,0,245,22,1,0,0,
  	0,246,247,5,44,0,0,247,24,1,0,0,0,248,249,5,42,0,0,249,26,1,0,0,0,250,
  	251,5,60,0,0,251,28,1,0,0,0,252,253,5,62,0,0,253,30,1,0,0,0,254,255,5,
  	91,0,0,255,32,1,0,0,0,256,257,5,93,0,0,257,34,1,0,0,0,258,259,5,123,0,
  	0,259,36,1,0,0,0,260,261,5,125,0,0,261,38,1,0,0,0,262,263,5,99,0,0,263,
  	264,5,108,0,0,264,265,5,97,0,0,265,266,5,115,0,0,266,267,5,115,0,0,267,
  	40,1,0,0,0,268,269,5,115,0,0,269,270,5,116,0,0,270,271,5,114,0,0,271,
  	272,5,117,0,0,272,273,5,99,0,0,273,274,5,116,0,0,274,42,1,0,0,0,275,276,
  	5,114,0,0,276,277,5,101,0,0,277,278,5,102,0,0,278,279,5,101,0,0,279,280,
  	5,114,0,0,280,281,5,101,0,0,281,282,5,110,0,0,282,283,5,99,0,0,283,284,
  	5,101,0,0,284,44,1,0,0,0,285,286,5,100,0,0,286,287,5,101,0,0,287,288,
  	5,112,0,0,288,289,5,101,0,0,289,290,5,110,0,0,290,291,5,100,0,0,291,292,
  	5,115,0,0,292,46,1,0,0,0,293,294,5,116,0,0,294,295,5,121,0,0,295,296,
  	5,112,0,0,296,297,5,101,0,0,297,298,5,100,0,0,298,299,5,101,0,0,299,300,
  	5,102,0,0,300,48,1,0,0,0,301,302,5,99,0,0,302,303,5,111,0,0,303,304,5,
  	110,0,0,304,305,5,115,0,0,305,306,5,116,0,0,306,50,1,0,0,0,307,308,5,
  	38,0,0,308,52,1,0,0,0,309,310,5,117,0,0,310,311,5,110,0,0,311,312,5,115,
  	0,0,312,313,5,105,0,0,313,314,5,103,0,0,314,315,5,110,0,0,315,316,5,101,
  	0,0,316,317,5,100,0,0,317,54,1,0,0,0,318,319,5,115,0,0,319,320,5,105,
  	0,0,320,321,5,103,0,0,321,322,5,110,0,0,322,323,5,101,0,0,323,324,5,100,
  	0,0,324,56,1,0,0,0,325,326,5,108,0,0,326,327,5,111,0,0,327,328,5,110,
  	0,0,328,329,5,103,0,0,329,58,1,0,0,0,330,331,5,105,0,0,331,332,5,110,
  	0,0,332,333,5,116,0,0,333,60,1,0,0,0,334,335,5,115,0,0,335,336,5,104,
  	0,0,336,337,5,111,0,0,337,338,5,114,0,0,338,339,5,116,0,0,339,62,1,0,
  	0,0,340,341,5,99,0,0,341,342,5,104,0,0,342,343,5,97,0,0,343,344,5,114,
  	0,0,344,64,1,0,0,0,345,346,5,98,0,0,346,347,5,111,0,0,347,348,5,111,0,
  	0,348,349,5,108,0,0,349,66,1,0,0,0,350,351,5,102,0,0,351,352,5,108,0,
  	0,352,353,5,111,0,0,353,354,5,97,0,0,354,355,5,116,0,0,355,68,1,0,0,0,
  	356,357,5,100,0,0,357,358,5,111,0,0,358,359,5,117,0,0,359,360,5,98,0,
  	0,360,361,5,108,0,0,361,362,5,101,0,0,362,70,1,0,0,0,363,364,5,118,0,
  	0,364,365,5,111,0,0,365,366,5,105,0,0,366,367,5,100,0,0,367,72,1,0,0,
  	0,368,369,5,84,0,0,369,370,5,121,0,0,370,371,5,112,0,0,371,372,5,101,
  	0,0,372,373,5,73,0,0,373,374,5,110,0,0,374,375,5,102,0,0,375,376,5,111,
  	0,0,376,74,1,0,0,0,377,378,5,83,0,0,378,379,5,105,0,0,379,380,5,122,0,
  	0,380,381,5,101,0,0,381,76,1,0,0,0,382,383,5,83,0,0,383,384,5,121,0,0,
  	384,385,5,110,0,0,385,386,5,111,0,0,386,387,5,110,0,0,387,388,5,121,0,
  	0,388,389,5,109,0,0,389,78,1,0,0,0,390,391,5,65,0,0,391,392,5,108,0,0,
  	392,393,5,105,0,0,393,394,5,103,0,0,394,395,5,110,0,0,395,80,1,0,0,0,
  	396,397,5,95,0,0,397,398,5,95,0,0,398,399,5,118,0,0,399,400,5,116,0,0,
  	400,401,5,97,0,0,401,402,5,98,0,0,402,403,5,108,0,0,403,404,5,101,0,0,
  	404,82,1,0,0,0,405,406,5,115,0,0,406,407,5,107,0,0,407,408,5,105,0,0,
  	408,409,5,112,0,0,409,84,1,0,0,0,410,411,5,112,0,0,411,412,5,117,0,0,
  	412,413,5,114,0,0,413,414,5,101,0,0,414,86,1,0,0,0,415,416,5,111,0,0,
  	416,417,5,118,0,0,417,418,5,101,0,0,418,419,5,114,0,0,419,420,5,114,0,
  	0,420,421,5,105,0,0,421,422,5,100,0,0,422,423,5,101,0,0,423,88,1,0,0,
  	0,424,425,5,100,0,0,425,426,5,101,0,0,426,427,5,98,0,0,427,428,5,117,
  	0,0,428,429,5,103,0,0,429,90,1,0,0,0,430,431,5,110,0,0,431,432,5,111,
  	0,0,432,433,5,104,0,0,433,434,5,111,0,0,434,435,5,111,0,0,435,436,5,107,
  	0,0,436,92,1,0,0,0,437,438,5,97,0,0,438,439,5,115,0,0,439,440,5,109,0,
  	0,440,94,1,0,0,0,441,445,3,97,48,0,442,445,3,99,49,0,443,445,3,101,50,
  	0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,96,1,0,0,0,446,
  	447,5,112,0,0,447,448,5,117,0,0,448,449,5,98,0,0,449,450,5,108,0,0,450,
  	451,5,105,0,0,451,452,5,99,0,0,452,98,1,0,0,0,453,454,5,112,0,0,454,455,
  	5,114,0,0,455,456,5,105,0,0,456,457,5,118,0,0,457,458,5,97,0,0,458,459,
  	5,116,0,0,459,460,5,101,0,0,460,100,1,0,0,0,461,462,5,112,0,0,462,463,
  	5,114,0,0,463,464,5,111,0,0,464,465,5,116,0,0,465,466,5,101,0,0,466,467,
  	5,99,0,0,467,468,5,116,0,0,468,469,5,101,0,0,469,470,5,100,0,0,470,102,
  	1,0,0,0,471,474,3,105,52,0,472,474,3,123,61,0,473,471,1,0,0,0,473,472,
  	1,0,0,0,474,104,1,0,0,0,475,484,3,107,53,0,476,484,3,109,54,0,477,484,
  	3,111,55,0,478,484,3,113,56,0,479,484,3,115,57,0,480,484,3,117,58,0,481,
  	484,3,119,59,0,482,484,3,121,60,0,483,475,1,0,0,0,483,476,1,0,0,0,483,
  	477,1,0,0,0,483,478,1,0,0,0,483,479,1,0,0,0,483,480,1,0,0,0,483,481,1,
  	0,0,0,483,482,1,0,0,0,484,106,1,0,0,0,485,486,5,101,0,0,486,487,5,97,
  	0,0,487,488,5,120,0,0,488,108,1,0,0,0,489,490,5,101,0,0,490,491,5,98,
  	0,0,491,492,5,120,0,0,492,110,1,0,0,0,493,494,5,101,0,0,494,495,5,99,
  	0,0,495,496,5,120,0,0,496,112,1,0,0,0,497,498,5,101,0,0,498,499,5,100,
  	0,0,499,500,5,120,0,0,500,114,1,0,0,0,501,502,5,101,0,0,502,503,5,115,
  	0,0,503,504,5,105,0,0,504,116,1,0,0,0,505,506,5,101,0,0,506,507,5,100,
  	0,0,507,508,5,105,0,0,508,118,1,0,0,0,509,510,5,101,0,0,510,511,5,115,
  	0,0,511,512,5,112,0,0,512,120,1,0,0,0,513,514,5,101,0,0,514,515,5,98,
  	0,0,515,516,5,112,0,0,516,122,1,0,0,0,517,526,3,125,62,0,518,526,3,127,
  	63,0,519,526,3,129,64,0,520,526,3,131,65,0,521,526,3,133,66,0,522,526,
  	3,135,67,0,523,526,3,137,68,0,524,526,3,139,69,0,525,517,1,0,0,0,525,
  	518,1,0,0,0,525,519,1,0,0,0,525,520,1,0,0,0,525,521,1,0,0,0,525,522,1,
  	0,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,124,1,0,0,0,527,528,5,120,0,
  	0,528,529,5,109,0,0,529,530,5,109,0,0,530,531,5,48,0,0,531,126,1,0,0,
  	0,532,533,5,120,0,0,533,534,5,109,0,0,534,535,5,109,0,0,535,536,5,49,
  	0,0,536,128,1,0,0,0,537,538,5,120,0,0,538,539,5,109,0,0,539,540,5,109,
  	0,0,540,541,5,50,0,0,541,130,1,0,0,0,542,543,5,120,0,0,543,544,5,109,
  	0,0,544,545,5,109,0,0,545,546,5,51,0,0,546,132,1,0,0,0,547,548,5,120,
  	0,0,548,549,5,109,0,0,549,550,5,109,0,0,550,551,5,52,0,0,551,134,1,0,
  	0,0,552,553,5,120,0,0,553,554,5,109,0,0,554,555,5,109,0,0,555,556,5,53,
  	0,0,556,136,1,0,0,0,557,558,5,120,0,0,558,559,5,109,0,0,559,560,5,109,
  	0,0,560,561,5,54,0,0,561,138,1,0,0,0,562,563,5,120,0,0,563,564,5,109,
  	0,0,564,565,5,109,0,0,565,566,5,55,0,0,566,140,1,0,0,0,567,574,3,143,
  	71,0,568,574,3,145,72,0,569,574,3,147,73,0,570,574,3,149,74,0,571,574,
  	3,151,75,0,572,574,3,153,76,0,573,567,1,0,0,0,573,568,1,0,0,0,573,569,
  	1,0,0,0,573,570,1,0,0,0,573,571,1,0,0,0,573,572,1,0,0,0,574,142,1,0,0,
  	0,575,576,5,95,0,0,576,577,5,95,0,0,577,578,5,115,0,0,578,579,5,116,0,
  	0,579,580,5,100,0,0,580,581,5,99,0,0,581,582,5,97,0,0,582,583,5,108,0,
  	0,583,584,5,108,0,0,584,144,1,0,0,0,585,586,5,95,0,0,586,587,5,95,0,0,
  	587,588,5,99,0,0,588,589,5,100,0,0,589,590,5,101,0,0,590,591,5,99,0,0,
  	591,592,5,108,0,0,592,146,1,0,0,0,593,594,5,95,0,0,594,595,5,95,0,0,595,
  	596,5,102,0,0,596,597,5,97,0,0,597,598,5,115,0,0,598,599,5,116,0,0,599,
  	600,5,99,0,0,600,601,5,97,0,0,601,602,5,108,0,0,602,603,5,108,0,0,603,
  	148,1,0,0,0,604,605,5,95,0,0,605,606,5,95,0,0,606,607,5,116,0,0,607,608,
  	5,104,0,0,608,609,5,105,0,0,609,610,5,115,0,0,610,611,5,99,0,0,611,612,
  	5,97,0,0,612,613,5,108,0,0,613,614,5,108,0,0,614,150,1,0,0,0,615,616,
  	5,95,0,0,616,617,5,95,0,0,617,618,5,120,0,0,618,619,5,56,0,0,619,620,
  	5,54,0,0,620,621,5,95,0,0,621,622,5,54,0,0,622,623,5,52,0,0,623,152,1,
  	0,0,0,624,625,5,95,0,0,625,626,5,95,0,0,626,627,5,120,0,0,627,628,5,56,
  	0,0,628,629,5,54,0,0,629,630,5,95,0,0,630,631,5,54,0,0,631,632,5,52,0,
  	0,632,633,5,95,0,0,633,634,5,111,0,0,634,635,5,117,0,0,635,636,5,116,
  	0,0,636,637,5,112,0,0,637,638,5,117,0,0,638,639,5,116,0,0,639,154,1,0,
  	0,0,640,642,3,1,0,0,641,643,5,46,0,0,642,641,1,0,0,0,642,643,1,0,0,0,
  	643,645,1,0,0,0,644,646,7,0,0,0,645,644,1,0,0,0,646,647,1,0,0,0,647,645,
  	1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,650,3,1,0,0,650,156,1,0,0,
  	0,651,652,3,155,77,0,652,653,3,3,1,0,653,158,1,0,0,0,654,656,3,1,0,0,
  	655,657,5,46,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,
  	660,7,1,0,0,659,658,1,0,0,0,660,661,1,0,0,0,661,659,1,0,0,0,661,662,1,
  	0,0,0,662,663,1,0,0,0,663,664,3,1,0,0,664,665,3,3,1,0,665,160,1,0,0,0,
  	666,667,5,111,0,0,667,668,5,112,0,0,668,669,5,101,0,0,669,670,5,114,0,
  	0,670,671,5,97,0,0,671,672,5,116,0,0,672,673,5,111,0,0,673,674,5,114,
  	0,0,674,162,1,0,0,0,675,677,7,2,0,0,676,678,5,61,0,0,677,676,1,0,0,0,
  	677,678,1,0,0,0,678,683,1,0,0,0,679,680,5,61,0,0,680,683,5,61,0,0,681,
  	683,5,61,0,0,682,675,1,0,0,0,682,679,1,0,0,0,682,681,1,0,0,0,683,164,
  	1,0,0,0,684,688,7,3,0,0,685,687,7,4,0,0,686,685,1,0,0,0,687,690,1,0,0,
  	0,688,686,1,0,0,0,688,689,1,0,0,0,689,166,1,0,0,0,690,688,1,0,0,0,691,
  	694,3,169,84,0,692,694,3,171,85,0,693,691,1,0,0,0,693,692,1,0,0,0,694,
  	168,1,0,0,0,695,696,5,48,0,0,696,697,5,120,0,0,697,699,1,0,0,0,698,700,
  	7,5,0,0,699,698,1,0,0,0,700,701,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,
  	0,702,170,1,0,0,0,703,705,7,6,0,0,704,703,1,0,0,0,705,706,1,0,0,0,706,
  	704,1,0,0,0,706,707,1,0,0,0,707,172,1,0,0,0,708,709,5,123,0,0,709,710,
  	5,123,0,0,710,714,1,0,0,0,711,713,9,0,0,0,712,711,1,0,0,0,713,716,1,0,
  	0,0,714,715,1,0,0,0,714,712,1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,
  	718,5,125,0,0,718,719,5,125,0,0,719,174,1,0,0,0,720,722,7,7,0,0,721,720,
  	1,0,0,0,722,723,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,
  	0,725,726,6,87,0,0,726,176,1,0,0,0,727,729,5,13,0,0,728,730,5,10,0,0,
  	729,728,1,0,0,0,729,730,1,0,0,0,730,733,1,0,0,0,731,733,5,10,0,0,732,
  	727,1,0,0,0,732,731,1,0,0,0,733,734,1,0,0,0,734,735,6,88,0,0,735,178,
  	1,0,0,0,736,737,5,47,0,0,737,738,5,42,0,0,738,742,1,0,0,0,739,741,9,0,
  	0,0,740,739,1,0,0,0,741,744,1,0,0,0,742,743,1,0,0,0,742,740,1,0,0,0,743,
  	745,1,0,0,0,744,742,1,0,0,0,745,746,5,42,0,0,746,747,5,47,0,0,747,748,
  	1,0,0,0,748,749,6,89,0,0,749,180,1,0,0,0,750,751,5,47,0,0,751,752,5,47,
  	0,0,752,756,1,0,0,0,753,755,8,8,0,0,754,753,1,0,0,0,755,758,1,0,0,0,756,
  	754,1,0,0,0,756,757,1,0,0,0,757,759,1,0,0,0,758,756,1,0,0,0,759,760,6,
  	90,0,0,760,182,1,0,0,0,761,762,9,0,0,0,762,184,1,0,0,0,23,0,197,444,473,
  	483,525,573,642,647,656,661,677,682,688,693,701,706,714,723,729,732,742,
  	756,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  zhllexerLexerStaticData = staticData.release();
}

}

ZHLLexer::ZHLLexer(CharStream *input) : Lexer(input) {
  ZHLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *zhllexerLexerStaticData->atn, zhllexerLexerStaticData->decisionToDFA, zhllexerLexerStaticData->sharedContextCache);
}

ZHLLexer::~ZHLLexer() {
  delete _interpreter;
}

std::string ZHLLexer::getGrammarFileName() const {
  return "ZHLLexer.g4";
}

const std::vector<std::string>& ZHLLexer::getRuleNames() const {
  return zhllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ZHLLexer::getChannelNames() const {
  return zhllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ZHLLexer::getModeNames() const {
  return zhllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ZHLLexer::getVocabulary() const {
  return zhllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ZHLLexer::getSerializedATN() const {
  return zhllexerLexerStaticData->serializedATN;
}

const atn::ATN& ZHLLexer::getATN() const {
  return *zhllexerLexerStaticData->atn;
}




void ZHLLexer::initialize() {
  ::antlr4::internal::call_once(zhllexerLexerOnceFlag, zhllexerLexerInitialize);
}
